#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define BUFSIZE 100
#define MAXOP 100
#define MAXVAL 100
#define NUMBER '0'

char buf[BUFSIZE];
int bufp = 0;

int sp = 0;
double val[MAXVAL];

int getch(void);
void ungetch(int c);
int getop(char s[]);
void push(double t);
double pop(void);
void printStack(void);
void printTop(void);
void duplicateTop(void);
void swapTopElements(void);
void clearStack(void);

int main(void)
{
	double d;
	
	printf("Enter value to input (terminate with -1): ");
	scanf("%lf", &d);
	
	push(d);
	while (d  != -1.0)
	{
		printf("\nEnter value to input (terminate with -1): ");
		scanf("%lf", &d);
	
		push(d);
	}
	printStack();
	
	swapTopElements();
	
	printTop();
	
	duplicateTop();
	//printTop();
	printStack();
}

int getch(void)
{
	return (buf > 0) ? buf[--bufp] : getchar();
}

void ungetch(int c)
{
	if (bufp >= BUFSIZE)
	{
		printf("ungetch: too many characters\n");
	}
	else
	{
		buf[bufp++] = c;
	}
}


int getop(char s[])
{
	int i, c;
	
	while ((s[0] = c = getch()) == ' ' || c == '\t')
	{
	}
	s[1] = '\0';
	
	if (!isdigit(c) && c != '.')
	{
		return c;
	}
	i = 0;
	if (isdigit(c))
	{
		while (isdigit(s[++i] = c = getch()))
		{
		}
	}
	
	if (c == '.')
	{
		while (isdigit(s[++i] = c = getch()))
		{
		}
	}
	s[i] = '\0';
	
	if (c != EOF)
	{
		ungetch(c);
	}
	
	return NUMBER;
}

void push(double t)
{
	if (sp < MAXVAL)
	{
		val[sp++] = t;
	}
	else
	{
		//%g is double                                                   
		printf("Error: stack full, can't push %g\n", t);
	}
}

double pop(void)
{
	if (sp > 0)
	{
		return val[--sp];
	}
	else
	{
		printf("Error: stack empty\n");
		return 0.0;
	}
}

void printStack(void)
{
	int i;
	for (i = 0; i < sp; i = i + 1)
	{
		printf("Stack item %d %lf\n", i, val[i]);
	}
}

void printTop(void)
{
	int valToPrint = sp - 1;
	if (sp == 0)
	{
		printf("Error: stack empty\n");
	}
	else
	{
		printf("Top value: %lf\n", sp, val[valToPrint]);
	}
}

void duplicateTop(void)
{
	int topVal;
	double topValue;
	
	if (sp == 0)
	{
		//printf("Error: stack empty\n");
	}
	else
	{
		topVal = sp - 1;
		topValue = val[topVal++];
		//printf("topValue: %lf\n", topValue);
		val[sp++] = topValue;
	}
}

void swapTopElements(void)
{
	double temp;
	int topVal = sp - 1;
	
	temp = val[topVal];
	val[topVal] = val[topVal - 1];
	val[topVal - 1] = temp;
}

void clearStack(void)
{
	int i;
	for (i = 0; i < sp; i = i + 1)
	{
		val[i] = 0.0;
	}
	sp = 0;
}